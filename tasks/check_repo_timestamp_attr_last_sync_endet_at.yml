---
- name: >-
    check_repo_timestamp_attr_last_sync_endet_at | Block: Handle checking if all Repositories
    have a correct timestamp set
  block:

    - name: >-
        check_repo_timestamp_attr_last_sync_endet_at | Ensure that all Repositories included in the Content Views/
        Composite Content Views have a valid timestamp set for the end of the last Repository synchronization
      ansible.builtin.assert:
        that:
          - >-
            ( __t_repository.last_sync.ended_at |
              ansible.builtin.to_datetime(format=_sat_api_timestamp_format) | default('')
            ).strftime('%s') != ''

        success_msg: 'All Repositories included in (Composite) Content Views have a correct timestamp set'
        fail_msg: >-
          Found at least Repository that does not have a correct timestamp set for the last synchronization
          which is included in at least one Content View/Composite Content View
        quiet: '{{ _sat_quiet_assert }}'
      register: '__t_has_invalid_last_sync_timestamp'
      loop: '{{ __t_filtered_repositories }}'
      loop_control:
        loop_var: '__t_repository'
        label: '{{ __t_repository.name }}'

  always:

    - name: 'check_repo_timestamp_attr_last_sync_endet_at | Block: Handle error case'
      when:
        - '__t_has_invalid_last_sync_timestamp.failed is defined'
        - '__t_has_invalid_last_sync_timestamp.failed'
      block:

        # I couldn't figure out a better way of testing a timestamp with ansible.builtin.to_datetime
        # as the filter does not provide a way to catch the error (with a default for instance) and
        # therefore, we include tasks that try to convert each timestamp on its own and catch any
        # failed items with 'ignore_errors: true'. Doing this in a loop would result in abortion of the
        # loop once a failed item is encountered, which would possibly lead to the user running this
        # role multiple times only to encounter the same error multiple times (but for different (Composite)
        # Content Views, which is very much undesirable
        - name: >-
            check_repo_timestamp_attr_last_sync_endet_at | Include tasks to check which timestamps can not be
            converted to Ansible date/time objects
          ansible.builtin.include_tasks:
            file: 'test_timestamp.yml'
          vars:
            __t_attribute: 'last_sync.ended_at'
          loop: '{{ __t_filtered_repositories }}'
          loop_control:
            loop_var: '__t_test_item'
            label: '{{ __t_test_item.name }}'

        - name: >-
            check_repo_timestamp_attr_last_sync_endet_at | List all published Repositories
            which have no valid timestamp set for the attribute 'last_sync.ended_at'
          ansible.builtin.debug:
            var: >-
              __t_failed_items | map(attribute='name')
          when:
            - '__t_failed_items is defined'
            - '__t_failed_items | length > 0'

        - name: 'check_repo_timestamp_attr_last_sync_endet_at | Fail with meaningful error message'
          ansible.builtin.fail:
            msg: >-
              Above Repositories have a timestamp format defined which is unknown to this
              role. *Usually*, it is defined as '%Y-%m-%d %H:%M:%S %Z', but the Satellite API response returned
              something else and therefore this role cannot continue.
...
