---
# whether to validate certificates when connecting to the Satellite API
_def_satellite_validate_certs: true

# time in seconds each async task runs until it times out
_def_sat_async_max_time: 3600

# poll time of each async task. Set to 0 for concurrent publish/promote actions
_def_sat_async_poll_time: 0

# how often an async task should be checked until it is determined failed
_def_sat_async_retries: 1200

# delay between each check whether an async task finished
_def_sat_async_check_delay: 3

# whether to quiet assert statements
_def_sat_quiet_assert: true

# whether to check if Repositories have been synchronized in the past.
# An unsynchronized Repository means it does not have any content and it doesn't (usually) make sense to include
# it into any Content View/Composite Content View
_def_sat_check_unsynchronized_repositories: false

# whether to check if Repositories are not currently synchronizing
# it will only be checked for Repositories which are included in any Content View/Composite Content View which
# should be published. Repositories which are not part of any to be published Content View/Composite Content View
# are not taken into consideration
_def_sat_check_synchronizing_repositories: false

# whether to wait for running Repository synchronizations to finish
# it will only wait for Repositories which are included in any Content View/Composite Content View which should
# be published. Repositories which are not part of any to be published Content View/Composite Content View
# are not taken into consideration
#
# setting this to true makes the most sense when also sat_check_synchronizing_repositories is set to true
_def_sat_wait_for_repository_synchronization: false

# whether to check if Repositories successfully finished synchronizing
# it will only be checked for Repositories which are included in any Content View/Composite Content View which
# should be published. Repositories which are not part of any to be published Content View/Composite Content View
# are not taken into consideration
_def_sat_check_successful_repository_synchronization: false

# which Content View kinds to process
# can either be:
# -> 'content_view' for Content Views
# -> 'composite_content_view' for Composite Content Views
# -> 'both' to process both Content Views and Composite Content Views
_def_sat_content_view_kinds: both

# whether to synchronize Repositories included in any Content View/Composite Content View prior to
# publishing a new version
# this will *only* synchronize Repositories which are *included* in any Content View/Composite Content View
_def_sat_synchronize_repositories: false

# format in which the timestamps are represented in the Satellite API.
# Usually, this doesn't need to be touched - but just in case, it's here.
# Be sure you know what you are doing before touching this variable. It is only validated whether it is a string.
_def_sat_api_timestamp_format: "%Y-%m-%d %H:%M:%S %Z"

# whether to check if all Content Views/Composite Content Views defined
# in satellite_content_views are known to Satellite
_def_sat_check_content_views_known: true

# whether to show a small summary at the end of the role, which lists all changed (Composite) Content Views and
# Repositories (if any)
_def_sat_show_summary: true

# whether to skip the on-the-fly conversion of 'legacy' Content View/Composite Content View definitions
#
# it is recommended to only turn this off when you are 100% sure that you already use the 'correct'
# definition.
# If your definition is not compatible and you turn this check the conversion off there might be unforseen
# side-effects and the role will fail
_def_sat_skip_legacy_conversion: false

# whether to turn off another 'safeguard' before the actual on-the-fly conversion of Content View/Composite
# Content View definitions which checks whether *all* elements of the definition can either be converted
# or already follow the required definition format
#
# it is recommended to only turn this off once you ran the role at least once to ensure that your
# definition can actually be converted. If your definition is not compatible and you turn this check of
# there might be unforseen side-effects and the role will fail
_def_sat_skip_legacy_assert: false

# whether to skip the assert statements which check all variables if they are properly defined
# depending on the size of your Content View/Composite Content View definition, this will take
# a considerable amount of time each time you run the role. You might want to turn it off, once you
# verified that your definition of all the variables is correct.
_def_sat_skip_assert: false

#
# below variables are only used when this role is run with the tag 'convert'
#

# what indentation (number of spaces) the converted YAML should have
_def_sat_convert_yaml_indent: 2

# whether to lexicographically sort keys while exporting the YAML
# this will invalidate _sat_convert_yaml_top_key, as the keys will be in lexicographical order
_def_sat_convert_yaml_sort_keys: false

# whether to add an explicit YAML beginning tag (---) to the converted file
_def_sat_convert_yaml_explicit_start: true

# whether to add an explicit YAML ending tag (...) to the converted file
_def_sat_convert_yaml_explicit_end: true

# whether to use the custom YAML filter packaged with this role
#
# the filter indents lists by two spaces and optionally puts a specific key and value to the top of a
# dictionary representing a Content View/Composite Content View
_def_sat_convert_yaml_use_custom_yaml_filter: true

# whether to put a specific key and value to the top of a dictionary representing a Content View/Composite Content View
# this key needs to exists - otherwise the custom filter will error out!
_def_sat_convert_yaml_top_key: name
